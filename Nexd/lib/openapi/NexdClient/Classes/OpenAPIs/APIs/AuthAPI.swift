//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift



open class AuthAPI {
    /**
     Login by email and password 
     
     - parameter loginDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<TokenDto>
     */
    open class func authControllerLogin(loginDto: LoginDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<TokenDto> {
        return Observable.create { observer -> Disposable in
            authControllerLoginWithRequestBuilder(loginDto: loginDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Login by email and password 
     - POST /auth/login
     - parameter loginDto: (body)  
     - returns: RequestBuilder<TokenDto> 
     */
    open class func authControllerLoginWithRequestBuilder(loginDto: LoginDto) -> RequestBuilder<TokenDto> {
        let path = "/auth/login"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenDto>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Not yet implemented, token refresh
     
     - parameter tokenDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<TokenDto>
     */
    open class func authControllerRefreshToken(tokenDto: TokenDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<TokenDto> {
        return Observable.create { observer -> Disposable in
            authControllerRefreshTokenWithRequestBuilder(tokenDto: tokenDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Not yet implemented, token refresh
     - POST /auth/refresh
     - parameter tokenDto: (body)  
     - returns: RequestBuilder<TokenDto> 
     */
    open class func authControllerRefreshTokenWithRequestBuilder(tokenDto: TokenDto) -> RequestBuilder<TokenDto> {
        let path = "/auth/refresh"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenDto>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register with email and password 
     
     - parameter registerDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<TokenDto>
     */
    open class func authControllerRegister(registerDto: RegisterDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<TokenDto> {
        return Observable.create { observer -> Disposable in
            authControllerRegisterWithRequestBuilder(registerDto: registerDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Register with email and password 
     - POST /auth/register
     - parameter registerDto: (body)  
     - returns: RequestBuilder<TokenDto> 
     */
    open class func authControllerRegisterWithRequestBuilder(registerDto: RegisterDto) -> RequestBuilder<TokenDto> {
        let path = "/auth/register"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenDto>.Type = NexdClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Email password reset initiation
     
     - parameter email: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func authControllerResetEmailPasswordInitiate(email: String, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            authControllerResetEmailPasswordInitiateWithRequestBuilder(email: email).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Email password reset initiation
     - GET /auth/reset_email_password_initiate/{email}
     - parameter email: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func authControllerResetEmailPasswordInitiateWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        var path = "/auth/reset_email_password_initiate/{email}"
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = NexdClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = NexdClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Email password reset initiation
     
     - parameter emailPasswordResetDto: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func authControllerResetPasswordComplete(emailPasswordResetDto: EmailPasswordResetDto, apiResponseQueue: DispatchQueue = NexdClientAPI.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            authControllerResetPasswordCompleteWithRequestBuilder(emailPasswordResetDto: emailPasswordResetDto).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Email password reset initiation
     - POST /auth/reset_email_password_complete
     - parameter emailPasswordResetDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func authControllerResetPasswordCompleteWithRequestBuilder(emailPasswordResetDto: EmailPasswordResetDto) -> RequestBuilder<Void> {
        let path = "/auth/reset_email_password_complete"
        let URLString = NexdClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailPasswordResetDto)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = NexdClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
