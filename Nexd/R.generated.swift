//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    /// Color `amountText`.
    static let amountText = Rswift.ColorResource(bundle: R.hostingBundle, name: "amountText")
    /// Color `darkButtonBorder`.
    static let darkButtonBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkButtonBorder")
    /// Color `darkButtonText`.
    static let darkButtonText = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkButtonText")
    /// Color `darkHeadingText`.
    static let darkHeadingText = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkHeadingText")
    /// Color `darkListItemBorder`.
    static let darkListItemBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkListItemBorder")
    /// Color `darkListItemDetails`.
    static let darkListItemDetails = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkListItemDetails")
    /// Color `darkListItemTitle`.
    static let darkListItemTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkListItemTitle")
    /// Color `defaultBackground`.
    static let defaultBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultBackground")
    /// Color `gradientEnd`.
    static let gradientEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "gradientEnd")
    /// Color `gradientStart`.
    static let gradientStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "gradientStart")
    /// Color `greetingSubline`.
    static let greetingSubline = Rswift.ColorResource(bundle: R.hostingBundle, name: "greetingSubline")
    /// Color `headingText`.
    static let headingText = Rswift.ColorResource(bundle: R.hostingBundle, name: "headingText")
    /// Color `lightButtonBackground`.
    static let lightButtonBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightButtonBackground")
    /// Color `lightButtonIcon`.
    static let lightButtonIcon = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightButtonIcon")
    /// Color `lightButtonText`.
    static let lightButtonText = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightButtonText")
    /// Color `listItemDetailsText`.
    static let listItemDetailsText = Rswift.ColorResource(bundle: R.hostingBundle, name: "listItemDetailsText")
    /// Color `listItemTitle`.
    static let listItemTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "listItemTitle")
    /// Color `negativeButtonText`.
    static let negativeButtonText = Rswift.ColorResource(bundle: R.hostingBundle, name: "negativeButtonText")
    /// Color `nexdGreen`.
    static let nexdGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "nexdGreen")
    /// Color `playerButton`.
    static let playerButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "playerButton")
    /// Color `positiveButtonText`.
    static let positiveButtonText = Rswift.ColorResource(bundle: R.hostingBundle, name: "positiveButtonText")
    /// Color `profileImageBackground`.
    static let profileImageBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileImageBackground")
    /// Color `textfieldStroke`.
    static let textfieldStroke = Rswift.ColorResource(bundle: R.hostingBundle, name: "textfieldStroke")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "amountText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func amountText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.amountText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkButtonBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkButtonBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkButtonBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkButtonText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkButtonText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkButtonText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkHeadingText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkHeadingText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkHeadingText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkListItemBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkListItemBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkListItemBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkListItemDetails", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkListItemDetails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkListItemDetails, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkListItemTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkListItemTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkListItemTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gradientEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gradientEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gradientEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gradientStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gradientStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gradientStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greetingSubline", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greetingSubline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greetingSubline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "headingText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headingText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headingText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightButtonBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightButtonBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightButtonBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightButtonIcon", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightButtonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightButtonText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightButtonText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightButtonText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "listItemDetailsText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func listItemDetailsText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.listItemDetailsText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "listItemTitle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func listItemTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.listItemTitle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "negativeButtonText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func negativeButtonText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.negativeButtonText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "nexdGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func nexdGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.nexdGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "playerButton", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func playerButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.playerButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "positiveButtonText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func positiveButtonText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.positiveButtonText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "profileImageBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileImageBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileImageBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textfieldStroke", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textfieldStroke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textfieldStroke, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `cymbal.wav`.
    static let cymbalWav = Rswift.FileResource(bundle: R.hostingBundle, name: "cymbal", pathExtension: "wav")
    /// Resource file `proxima-nova-soft-bold-webfont.ttf`.
    static let proximaNovaSoftBoldWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "proxima-nova-soft-bold-webfont", pathExtension: "ttf")
    /// Resource file `proxima-nova-soft-medium-webfont.ttf`.
    static let proximaNovaSoftMediumWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "proxima-nova-soft-medium-webfont", pathExtension: "ttf")
    /// Resource file `proxima-nova-soft-regular-webfont.ttf`.
    static let proximaNovaSoftRegularWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "proxima-nova-soft-regular-webfont", pathExtension: "ttf")
    /// Resource file `proxima-nova-soft-semibold-webfont.ttf`.
    static let proximaNovaSoftSemiboldWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "proxima-nova-soft-semibold-webfont", pathExtension: "ttf")
    /// Resource file `recording.mp3`.
    static let recordingMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "recording", pathExtension: "mp3")

    /// `bundle.url(forResource: "cymbal", withExtension: "wav")`
    static func cymbalWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cymbalWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "proxima-nova-soft-bold-webfont", withExtension: "ttf")`
    static func proximaNovaSoftBoldWebfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximaNovaSoftBoldWebfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "proxima-nova-soft-medium-webfont", withExtension: "ttf")`
    static func proximaNovaSoftMediumWebfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximaNovaSoftMediumWebfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "proxima-nova-soft-regular-webfont", withExtension: "ttf")`
    static func proximaNovaSoftRegularWebfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximaNovaSoftRegularWebfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "proxima-nova-soft-semibold-webfont", withExtension: "ttf")`
    static func proximaNovaSoftSemiboldWebfontTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximaNovaSoftSemiboldWebfontTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "recording", withExtension: "mp3")`
    static func recordingMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recordingMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `ProximaNovaSoft-Bold`.
    static let proximaNovaSoftBold = Rswift.FontResource(fontName: "ProximaNovaSoft-Bold")
    /// Font `ProximaNovaSoft-Medium`.
    static let proximaNovaSoftMedium = Rswift.FontResource(fontName: "ProximaNovaSoft-Medium")
    /// Font `ProximaNovaSoft-Regular`.
    static let proximaNovaSoftRegular = Rswift.FontResource(fontName: "ProximaNovaSoft-Regular")
    /// Font `ProximaNovaSoft-Semibold`.
    static let proximaNovaSoftSemibold = Rswift.FontResource(fontName: "ProximaNovaSoft-Semibold")

    /// `UIFont(name: "ProximaNovaSoft-Bold", size: ...)`
    static func proximaNovaSoftBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaSoftBold, size: size)
    }

    /// `UIFont(name: "ProximaNovaSoft-Medium", size: ...)`
    static func proximaNovaSoftMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaSoftMedium, size: size)
    }

    /// `UIFont(name: "ProximaNovaSoft-Regular", size: ...)`
    static func proximaNovaSoftRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaSoftRegular, size: size)
    }

    /// `UIFont(name: "ProximaNovaSoft-Semibold", size: ...)`
    static func proximaNovaSoftSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaSoftSemibold, size: size)
    }

    static func validate() throws {
      if R.font.proximaNovaSoftBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNovaSoft-Bold' could not be loaded, is 'proxima-nova-soft-bold-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaSoftMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNovaSoft-Medium' could not be loaded, is 'proxima-nova-soft-medium-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaSoftRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNovaSoft-Regular' could not be loaded, is 'proxima-nova-soft-regular-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaSoftSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNovaSoft-Semibold' could not be loaded, is 'proxima-nova-soft-semibold-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 28 images.
  struct image {
    /// Image `Chevron`.
    static let chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chevron")
    /// Image `Lock 1`.
    static let lock1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lock 1")
    /// Image `Lock 2`.
    static let lock2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lock 2")
    /// Image `Mail 1`.
    static let mail1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mail 1")
    /// Image `Person 1`.
    static let person1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Person 1")
    /// Image `Rectangle 11`.
    static let rectangle11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 11")
    /// Image `Shopbag 1`.
    static let shopbag1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shopbag 1")
    /// Image `baseline_account_box_black_18pt`.
    static let baseline_account_box_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_18pt")
    /// Image `baseline_account_box_black_24pt`.
    static let baseline_account_box_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_24pt")
    /// Image `baseline_account_box_black_36pt`.
    static let baseline_account_box_black_36pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_36pt")
    /// Image `baseline_account_box_black_48pt`.
    static let baseline_account_box_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_account_box_black_48pt")
    /// Image `baseline_check_black_48pt`.
    static let baseline_check_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_check_black_48pt")
    /// Image `baseline_error_black_18pt`.
    static let baseline_error_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_error_black_18pt")
    /// Image `baseline_shopping_basket_black_48pt`.
    static let baseline_shopping_basket_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_shopping_basket_black_48pt")
    /// Image `baseline_voicemail_black_24pt`.
    static let baseline_voicemail_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_voicemail_black_24pt")
    /// Image `baseline_voicemail_black_48pt`.
    static let baseline_voicemail_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_voicemail_black_48pt")
    /// Image `baseline_warning_black_18pt`.
    static let baseline_warning_black_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_warning_black_18pt")
    /// Image `cancel_icon`.
    static let cancel_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_icon")
    /// Image `chevron_left`.
    static let chevron_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron_left")
    /// Image `gradient`.
    static let gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradient")
    /// Image `hashtag`.
    static let hashtag = Rswift.ImageResource(bundle: R.hostingBundle, name: "hashtag")
    /// Image `logo_white`.
    static let logo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_white")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `outline_account_box_black_48pt`.
    static let outline_account_box_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_account_box_black_48pt")
    /// Image `outline_directions_walk_black_48pt`.
    static let outline_directions_walk_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_directions_walk_black_48pt")
    /// Image `outline_shopping_cart_black_48pt`.
    static let outline_shopping_cart_black_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "outline_shopping_cart_black_48pt")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chevron", bundle: ..., traitCollection: ...)`
    static func chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lock 1", bundle: ..., traitCollection: ...)`
    static func lock1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lock 2", bundle: ..., traitCollection: ...)`
    static func lock2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Mail 1", bundle: ..., traitCollection: ...)`
    static func mail1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Person 1", bundle: ..., traitCollection: ...)`
    static func person1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 11", bundle: ..., traitCollection: ...)`
    static func rectangle11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shopbag 1", bundle: ..., traitCollection: ...)`
    static func shopbag1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopbag1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_24pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_36pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_36pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_36pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_account_box_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_account_box_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_account_box_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_check_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_check_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_check_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_error_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_error_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_error_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_shopping_basket_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_shopping_basket_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_shopping_basket_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_voicemail_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_voicemail_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_voicemail_black_24pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_voicemail_black_48pt", bundle: ..., traitCollection: ...)`
    static func baseline_voicemail_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_voicemail_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_warning_black_18pt", bundle: ..., traitCollection: ...)`
    static func baseline_warning_black_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_warning_black_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel_icon", bundle: ..., traitCollection: ...)`
    static func cancel_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron_left", bundle: ..., traitCollection: ...)`
    static func chevron_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevron_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gradient", bundle: ..., traitCollection: ...)`
    static func gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hashtag", bundle: ..., traitCollection: ...)`
    static func hashtag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hashtag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_white", bundle: ..., traitCollection: ...)`
    static func logo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_account_box_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_account_box_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_account_box_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_directions_walk_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_directions_walk_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_directions_walk_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "outline_shopping_cart_black_48pt", bundle: ..., traitCollection: ...)`
    static func outline_shopping_cart_black_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.outline_shopping_cart_black_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 133 localization keys.
    struct localizable {
      /// en translation: %1$@ ago, %2$@
      ///
      /// Locales: en, de
      static let helper_request_overview_open_request_item_details_format_ios = Rswift.StringResource(key: "helper_request_overview_open_request_item_details_format_ios", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: %1$@'s contact information:
      ///
      /// Locales: en, de
      static let delivery_confirmation_section_header = Rswift.StringResource(key: "delivery_confirmation_section_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: - unknown -
      ///
      /// Locales: en, de
      static let helper_request_overview_unknown_requester = Rswift.StringResource(key: "helper_request_overview_unknown_requester", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: <![CDATA[Please call <br><b>%1$s</b><br>to record your shopping order.]]>
      ///
      /// Locales: en, de
      static let seeker_phone_call_text = Rswift.StringResource(key: "seeker_phone_call_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Abort
      ///
      /// Locales: en, de
      static let dialog_button_abort = Rswift.StringResource(key: "dialog_button_abort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Accepted requests:
      ///
      /// Locales: en, de
      static let helper_request_overview_heading_accepted_section = Rswift.StringResource(key: "helper_request_overview_heading_accepted_section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Account is already registered!
      ///
      /// Locales: en, de
      static let error_message_registration_user_already_exists = Rswift.StringResource(key: "error_message_registration_user_already_exists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Add order to Current Item List
      ///
      /// Locales: en, de
      static let helper_request_transcript_button_done = Rswift.StringResource(key: "helper_request_transcript_button_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Additional information
      ///
      /// Locales: en, de
      static let seeker_detail_placeholder_information = Rswift.StringResource(key: "seeker_detail_placeholder_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Additional information
      ///
      /// Locales: en, de
      static let seeker_request_create_placeholder_information = Rswift.StringResource(key: "seeker_request_create_placeholder_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Address: 
      ///
      /// Locales: en, de
      static let delivery_request_address = Rswift.StringResource(key: "delivery_request_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: At least 8 characters
      ///
      /// Locales: en, de
      static let error_message_registration_password_too_short = Rswift.StringResource(key: "error_message_registration_password_too_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Authentication failed!
      ///
      /// Locales: en, de
      static let error_dialog_authentication_failed_title = Rswift.StringResource(key: "error_dialog_authentication_failed_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Available requests:
      ///
      /// Locales: en, de
      static let helper_request_overview_heading_available_section = Rswift.StringResource(key: "helper_request_overview_heading_available_section", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, de
      static let back_button_title = Rswift.StringResource(key: "back_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: By creating an account, I agree to Nexd's %1$@
      ///
      /// Locales: en, de
      static let registration_label_privacy_policy_agreement = Rswift.StringResource(key: "registration_label_privacy_policy_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Call Transcript
      ///
      /// Locales: en, de
      static let transcribe_info_screen_title = Rswift.StringResource(key: "transcribe_info_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, de
      static let cancel_button_title = Rswift.StringResource(key: "cancel_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Checkout
      ///
      /// Locales: en, de
      static let checkout_screen_title = Rswift.StringResource(key: "checkout_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Checkout
      ///
      /// Locales: en, de
      static let shopping_list_button_title_checkout = Rswift.StringResource(key: "shopping_list_button_title_checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Chose items
      ///
      /// Locales: en, de
      static let seeker_item_selection_screen_title = Rswift.StringResource(key: "seeker_item_selection_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_city = Rswift.StringResource(key: "transcribe_info_input_text_title_city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Complete
      ///
      /// Locales: en, de
      static let checkout_button_title_complete = Rswift.StringResource(key: "checkout_button_title_complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Completed requests:
      ///
      /// Locales: en, de
      static let helper_request_finished_screen_title = Rswift.StringResource(key: "helper_request_finished_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let confirm_button_title = Rswift.StringResource(key: "confirm_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let delivery_dialog_delivery_button_confirm = Rswift.StringResource(key: "delivery_dialog_delivery_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let dialog_button_confirm = Rswift.StringResource(key: "dialog_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let transcribe_articles_button_title_confirm = Rswift.StringResource(key: "transcribe_articles_button_title_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, de
      static let user_input_details_confirm = Rswift.StringResource(key: "user_input_details_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm Info
      ///
      /// Locales: en, de
      static let transcribe_info_button_title_confirm = Rswift.StringResource(key: "transcribe_info_button_title_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static let registration_placeholder_confirm_password = Rswift.StringResource(key: "registration_placeholder_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Confirm the delivery of all accepted requests
      ///
      /// Locales: en, de
      static let delivery_dialog_deliver_description = Rswift.StringResource(key: "delivery_dialog_deliver_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en, de
      static let registration_button_title_continue = Rswift.StringResource(key: "registration_button_title_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Current Items List
      ///
      /// Locales: en, de
      static let helper_request_overview_button_title_current_items_list = Rswift.StringResource(key: "helper_request_overview_button_title_current_items_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Currently there are no calls waiting for translation. Please try again later!
      ///
      /// Locales: en, de
      static let transcribe_info_error_message_no_calls = Rswift.StringResource(key: "transcribe_info_error_message_no_calls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Deliver
      ///
      /// Locales: en, de
      static let delivery_dialog_deliver_title = Rswift.StringResource(key: "delivery_dialog_deliver_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Delivery comment
      ///
      /// Locales: en, de
      static let seeker_request_create_placeholder_delivery_comment = Rswift.StringResource(key: "seeker_request_create_placeholder_delivery_comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Delivery!
      ///
      /// Locales: en, de
      static let delivery_screen_title = Rswift.StringResource(key: "delivery_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, de
      static let transcribe_end_button_title_complete = Rswift.StringResource(key: "transcribe_end_button_title_complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Done!
      ///
      /// Locales: en, de
      static let seeker_success_title = Rswift.StringResource(key: "seeker_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en, de
      static let registration_placeholder_email = Rswift.StringResource(key: "registration_placeholder_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, de
      static let error_title = Rswift.StringResource(key: "error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let helper_request_overview_error_title = Rswift.StringResource(key: "helper_request_overview_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let seeker_error_title = Rswift.StringResource(key: "seeker_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, de
      static let shopping_list_overview_error_title = Rswift.StringResource(key: "shopping_list_overview_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Finish shopping
      ///
      /// Locales: en, de
      static let delivery_confirmation_confirm_button_title = Rswift.StringResource(key: "delivery_confirmation_confirm_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: First name
      ///
      /// Locales: en, de
      static let registration_placeholder_firstName = Rswift.StringResource(key: "registration_placeholder_firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: First name
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_first_name = Rswift.StringResource(key: "transcribe_info_input_text_title_first_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How would you like to help?
      ///
      /// Locales: en, de
      static let helper_type_screen_title = Rswift.StringResource(key: "helper_type_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: How would you like to make your list?
      ///
      /// Locales: en, de
      static let seeker_type_screen_title = Rswift.StringResource(key: "seeker_type_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I can help
      ///
      /// Locales: en, de
      static let role_selection_helper = Rswift.StringResource(key: "role_selection_helper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I need something
      ///
      /// Locales: en, de
      static let role_selection_seeker = Rswift.StringResource(key: "role_selection_seeker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I need:
      ///
      /// Locales: en, de
      static let seeker_request_create_heading = Rswift.StringResource(key: "seeker_request_create_heading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: I'd like to shop!
      ///
      /// Locales: en, de
      static let helper_type_button_shopping = Rswift.StringResource(key: "helper_type_button_shopping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Input further information
      ///
      /// Locales: en, de
      static let user_input_details_screen_title = Rswift.StringResource(key: "user_input_details_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Invalid E-mail address
      ///
      /// Locales: en, de
      static let error_message_registration_invalid_email = Rswift.StringResource(key: "error_message_registration_invalid_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, de
      static let registration_placeholder_lastName = Rswift.StringResource(key: "registration_placeholder_lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_last_name = Rswift.StringResource(key: "transcribe_info_input_text_title_last_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: List
      ///
      /// Locales: en, de
      static let helper_request_overview_item_type_list = Rswift.StringResource(key: "helper_request_overview_item_type_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en, de
      static let loading_overlay_message = Rswift.StringResource(key: "loading_overlay_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, de
      static let role_selection_button_logout = Rswift.StringResource(key: "role_selection_button_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, de
      static let login_button_title_login = Rswift.StringResource(key: "login_button_title_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, de
      static let login_screen_title = Rswift.StringResource(key: "login_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Login failed. Please try again.
      ///
      /// Locales: en, de
      static let error_message_login_failed = Rswift.StringResource(key: "error_message_login_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, de
      static let user_profile_button_title_logout = Rswift.StringResource(key: "user_profile_button_title_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Make a phone call
      ///
      /// Locales: en, de
      static let seeker_type_button_phone_call = Rswift.StringResource(key: "seeker_type_button_phone_call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: No calls found!
      ///
      /// Locales: en, de
      static let transcribe_info_error_title_no_calls = Rswift.StringResource(key: "transcribe_info_error_title_no_calls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: No.
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_houseNumber = Rswift.StringResource(key: "user_input_details_placeholder_houseNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Number
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_street_number = Rswift.StringResource(key: "transcribe_info_input_text_title_street_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, de
      static let error_button_ok = Rswift.StringResource(key: "error_button_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, de
      static let ok_button_title = Rswift.StringResource(key: "ok_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Open calls:
      ///
      /// Locales: en, de
      static let helper_call_overview_screen_title = Rswift.StringResource(key: "helper_call_overview_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Overview
      ///
      /// Locales: en, de
      static let helper_request_overview_screen_title = Rswift.StringResource(key: "helper_request_overview_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let login_placeholder_password = Rswift.StringResource(key: "login_placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, de
      static let registration_placeholder_password = Rswift.StringResource(key: "registration_placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Passwords dont match
      ///
      /// Locales: en, de
      static let error_message_registration_password_match = Rswift.StringResource(key: "error_message_registration_password_match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en, de
      static let registration_placeholder_phone = Rswift.StringResource(key: "registration_placeholder_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_phone_number = Rswift.StringResource(key: "transcribe_info_input_text_title_phone_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Phone number doesn't match the expected format: +4915112345678
      ///
      /// Locales: en, de
      static let error_message_input_validation_phone_number_invalid = Rswift.StringResource(key: "error_message_input_validation_phone_number_invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Place
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_city = Rswift.StringResource(key: "user_input_details_placeholder_city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please call %@ to record your shopping order.
      ///
      /// Locales: en, de
      static let seeker_phone_call_text_ios = Rswift.StringResource(key: "seeker_phone_call_text_ios", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please enter the valid zip code
      ///
      /// Locales: en, de
      static let error_message_input_validation_zip_code_invalid = Rswift.StringResource(key: "error_message_input_validation_zip_code_invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_login_field_missing = Rswift.StringResource(key: "error_message_login_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_registration_field_missing = Rswift.StringResource(key: "error_message_registration_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static let error_message_user_detail_field_missing = Rswift.StringResource(key: "error_message_user_detail_field_missing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Postal Code / Town
      ///
      /// Locales: en, de
      static let delivery_confirmation_address_title = Rswift.StringResource(key: "delivery_confirmation_address_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Postal code
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_postal_code = Rswift.StringResource(key: "transcribe_info_input_text_title_postal_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Previous purchases
      ///
      /// Locales: en, de
      static let helper_request_overview_button_previous_requests = Rswift.StringResource(key: "helper_request_overview_button_previous_requests", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static let registration_button_privacy_policy = Rswift.StringResource(key: "registration_button_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static let registration_term_privacy_policy = Rswift.StringResource(key: "registration_term_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Recording
      ///
      /// Locales: en, de
      static let helper_request_overview_item_type_recording = Rswift.StringResource(key: "helper_request_overview_item_type_recording", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, de
      static let login_button_title_register = Rswift.StringResource(key: "login_button_title_register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Request already accepted
      ///
      /// Locales: en, de
      static let helper_request_detail_button_accepted = Rswift.StringResource(key: "helper_request_detail_button_accepted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Request failed!
      ///
      /// Locales: en, de
      static let transcribe_articles_error_title = Rswift.StringResource(key: "transcribe_articles_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Role
      ///
      /// Locales: en, de
      static let role_selection_screen_title = Rswift.StringResource(key: "role_selection_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Saving the help request failed. Please make sure the data is correct and valid!
      ///
      /// Locales: en, de
      static let transcribe_articles_error_message = Rswift.StringResource(key: "transcribe_articles_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Select items
      ///
      /// Locales: en, de
      static let seeker_type_button_help_request = Rswift.StringResource(key: "seeker_type_button_help_request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, de
      static let registration_button_title_send = Rswift.StringResource(key: "registration_button_title_send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping
      ///
      /// Locales: en, de
      static let helper_request_overview_button_summary_title = Rswift.StringResource(key: "helper_request_overview_button_summary_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static let shopping_list_screen_title = Rswift.StringResource(key: "shopping_list_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static let transcribe_articles_screen_title = Rswift.StringResource(key: "transcribe_articles_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Shopping list could not be loaded. Please try again!
      ///
      /// Locales: en, de
      static let shopping_list_overview_error_loading_failed_message = Rswift.StringResource(key: "shopping_list_overview_error_loading_failed_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Sign-up
      ///
      /// Locales: en, de
      static let registration_screen_title = Rswift.StringResource(key: "registration_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, de
      static let helper_request_overview_button_title_start = Rswift.StringResource(key: "helper_request_overview_button_title_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Street
      ///
      /// Locales: en, de
      static let transcribe_info_input_text_title_street = Rswift.StringResource(key: "transcribe_info_input_text_title_street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Street
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_street = Rswift.StringResource(key: "user_input_details_placeholder_street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, de
      static let seeker_submit_button_title = Rswift.StringResource(key: "seeker_submit_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Tel.
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_phoneNumber = Rswift.StringResource(key: "user_input_details_placeholder_phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Tel.: 
      ///
      /// Locales: en, de
      static let delivery_request_phoneNumber = Rswift.StringResource(key: "delivery_request_phoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Telephone number
      ///
      /// Locales: en, de
      static let delivery_confirmation_phone_number_title = Rswift.StringResource(key: "delivery_confirmation_phone_number_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Thank you for completing the orders!
      ///
      /// Locales: en, de
      static let delivery_confirmation_screen_title = Rswift.StringResource(key: "delivery_confirmation_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Thank you for helping complete the request!
      ///
      /// Locales: en, de
      static let transcribe_end_screen_title_ios = Rswift.StringResource(key: "transcribe_end_screen_title_ios", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: To collect
      ///
      /// Locales: en, de
      static let helper_request_detail_screen_title = Rswift.StringResource(key: "helper_request_detail_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Total 
      ///
      /// Locales: en, de
      static let helper_request_overview_button_summary_details = Rswift.StringResource(key: "helper_request_overview_button_summary_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Transcript a call!
      ///
      /// Locales: en, de
      static let helper_type_button_transcript = Rswift.StringResource(key: "helper_type_button_transcript", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, de
      static let error_message_unknown = Rswift.StringResource(key: "error_message_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User authentication failed please try to login again.
      ///
      /// Locales: en, de
      static let error_dialog_authentication_failed_message = Rswift.StringResource(key: "error_dialog_authentication_failed_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User profile
      ///
      /// Locales: en, de
      static let user_profile_screen_title = Rswift.StringResource(key: "user_profile_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User registration failed. Please make sure you input valid data.
      ///
      /// Locales: en, de
      static let error_message_registration_validation_failed = Rswift.StringResource(key: "error_message_registration_validation_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: User registration failed. Please try again.
      ///
      /// Locales: en, de
      static let error_message_registration_failed = Rswift.StringResource(key: "error_message_registration_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, de
      static let login_placeholder_username = Rswift.StringResource(key: "login_placeholder_username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Welcome, 
      ///
      /// Locales: en, de
      static let role_screen_title = Rswift.StringResource(key: "role_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Welcome, %@
      ///
      /// Locales: en, de
      static let role_screen_title_ios = Rswift.StringResource(key: "role_screen_title_ios", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: What would you like to do today?
      ///
      /// Locales: en, de
      static let role_screen_subtitle = Rswift.StringResource(key: "role_screen_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Will do!
      ///
      /// Locales: en, de
      static let helper_request_detail_button_accept = Rswift.StringResource(key: "helper_request_detail_button_accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: You haven't sent any requests yet. Please click below right to create your first request.
      ///
      /// Locales: en, de
      static let seeker_overview_empty_label = Rswift.StringResource(key: "seeker_overview_empty_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request
      ///
      /// Locales: en, de
      static let seeker_detail_screen_title = Rswift.StringResource(key: "seeker_detail_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static let helper_request_overview_error_message = Rswift.StringResource(key: "helper_request_overview_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static let seeker_error_message = Rswift.StringResource(key: "seeker_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your request was sent successfully.
      ///
      /// Locales: en, de
      static let seeker_success_message = Rswift.StringResource(key: "seeker_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Your requests:
      ///
      /// Locales: en, de
      static let seeker_overview_screen_title = Rswift.StringResource(key: "seeker_overview_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static let registration_placeholder_zip = Rswift.StringResource(key: "registration_placeholder_zip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)
      /// en translation: Zip code
      ///
      /// Locales: en, de
      static let user_input_details_placeholder_zipCode = Rswift.StringResource(key: "user_input_details_placeholder_zipCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "de"], comment: nil)

      /// en translation: %1$@ ago, %2$@
      ///
      /// Locales: en, de
      static func helper_request_overview_open_request_item_details_format_ios(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("helper_request_overview_open_request_item_details_format_ios", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_open_request_item_details_format_ios"
        }

        let format = NSLocalizedString("helper_request_overview_open_request_item_details_format_ios", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: %1$@'s contact information:
      ///
      /// Locales: en, de
      static func delivery_confirmation_section_header(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("delivery_confirmation_section_header", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_confirmation_section_header"
        }

        let format = NSLocalizedString("delivery_confirmation_section_header", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: - unknown -
      ///
      /// Locales: en, de
      static func helper_request_overview_unknown_requester(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_unknown_requester", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_unknown_requester"
        }

        return NSLocalizedString("helper_request_overview_unknown_requester", bundle: bundle, comment: "")
      }

      /// en translation: <![CDATA[Please call <br><b>%1$s</b><br>to record your shopping order.]]>
      ///
      /// Locales: en, de
      static func seeker_phone_call_text(_ value1: UnsafePointer<unichar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("seeker_phone_call_text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_phone_call_text"
        }

        let format = NSLocalizedString("seeker_phone_call_text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Abort
      ///
      /// Locales: en, de
      static func dialog_button_abort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_button_abort", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_button_abort"
        }

        return NSLocalizedString("dialog_button_abort", bundle: bundle, comment: "")
      }

      /// en translation: Accepted requests:
      ///
      /// Locales: en, de
      static func helper_request_overview_heading_accepted_section(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_heading_accepted_section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_heading_accepted_section"
        }

        return NSLocalizedString("helper_request_overview_heading_accepted_section", bundle: bundle, comment: "")
      }

      /// en translation: Account is already registered!
      ///
      /// Locales: en, de
      static func error_message_registration_user_already_exists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_user_already_exists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_user_already_exists"
        }

        return NSLocalizedString("error_message_registration_user_already_exists", bundle: bundle, comment: "")
      }

      /// en translation: Add order to Current Item List
      ///
      /// Locales: en, de
      static func helper_request_transcript_button_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_transcript_button_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_transcript_button_done"
        }

        return NSLocalizedString("helper_request_transcript_button_done", bundle: bundle, comment: "")
      }

      /// en translation: Additional information
      ///
      /// Locales: en, de
      static func seeker_detail_placeholder_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_detail_placeholder_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_detail_placeholder_information"
        }

        return NSLocalizedString("seeker_detail_placeholder_information", bundle: bundle, comment: "")
      }

      /// en translation: Additional information
      ///
      /// Locales: en, de
      static func seeker_request_create_placeholder_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_request_create_placeholder_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_request_create_placeholder_information"
        }

        return NSLocalizedString("seeker_request_create_placeholder_information", bundle: bundle, comment: "")
      }

      /// en translation: Address: 
      ///
      /// Locales: en, de
      static func delivery_request_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_request_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_request_address"
        }

        return NSLocalizedString("delivery_request_address", bundle: bundle, comment: "")
      }

      /// en translation: At least 8 characters
      ///
      /// Locales: en, de
      static func error_message_registration_password_too_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_password_too_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_password_too_short"
        }

        return NSLocalizedString("error_message_registration_password_too_short", bundle: bundle, comment: "")
      }

      /// en translation: Authentication failed!
      ///
      /// Locales: en, de
      static func error_dialog_authentication_failed_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_dialog_authentication_failed_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_dialog_authentication_failed_title"
        }

        return NSLocalizedString("error_dialog_authentication_failed_title", bundle: bundle, comment: "")
      }

      /// en translation: Available requests:
      ///
      /// Locales: en, de
      static func helper_request_overview_heading_available_section(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_heading_available_section", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_heading_available_section"
        }

        return NSLocalizedString("helper_request_overview_heading_available_section", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, de
      static func back_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back_button_title"
        }

        return NSLocalizedString("back_button_title", bundle: bundle, comment: "")
      }

      /// en translation: By creating an account, I agree to Nexd's %1$@
      ///
      /// Locales: en, de
      static func registration_label_privacy_policy_agreement(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("registration_label_privacy_policy_agreement", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_label_privacy_policy_agreement"
        }

        let format = NSLocalizedString("registration_label_privacy_policy_agreement", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Call Transcript
      ///
      /// Locales: en, de
      static func transcribe_info_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_screen_title"
        }

        return NSLocalizedString("transcribe_info_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, de
      static func cancel_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_button_title"
        }

        return NSLocalizedString("cancel_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Checkout
      ///
      /// Locales: en, de
      static func checkout_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkout_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "checkout_screen_title"
        }

        return NSLocalizedString("checkout_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Checkout
      ///
      /// Locales: en, de
      static func shopping_list_button_title_checkout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_button_title_checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_button_title_checkout"
        }

        return NSLocalizedString("shopping_list_button_title_checkout", bundle: bundle, comment: "")
      }

      /// en translation: Chose items
      ///
      /// Locales: en, de
      static func seeker_item_selection_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_item_selection_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_item_selection_screen_title"
        }

        return NSLocalizedString("seeker_item_selection_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_city"
        }

        return NSLocalizedString("transcribe_info_input_text_title_city", bundle: bundle, comment: "")
      }

      /// en translation: Complete
      ///
      /// Locales: en, de
      static func checkout_button_title_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("checkout_button_title_complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "checkout_button_title_complete"
        }

        return NSLocalizedString("checkout_button_title_complete", bundle: bundle, comment: "")
      }

      /// en translation: Completed requests:
      ///
      /// Locales: en, de
      static func helper_request_finished_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_finished_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_finished_screen_title"
        }

        return NSLocalizedString("helper_request_finished_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func confirm_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_button_title"
        }

        return NSLocalizedString("confirm_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func delivery_dialog_delivery_button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_delivery_button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_delivery_button_confirm"
        }

        return NSLocalizedString("delivery_dialog_delivery_button_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func dialog_button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dialog_button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dialog_button_confirm"
        }

        return NSLocalizedString("dialog_button_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func transcribe_articles_button_title_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_articles_button_title_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_articles_button_title_confirm"
        }

        return NSLocalizedString("transcribe_articles_button_title_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, de
      static func user_input_details_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_confirm"
        }

        return NSLocalizedString("user_input_details_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Info
      ///
      /// Locales: en, de
      static func transcribe_info_button_title_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_button_title_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_button_title_confirm"
        }

        return NSLocalizedString("transcribe_info_button_title_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, de
      static func registration_placeholder_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_confirm_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_confirm_password"
        }

        return NSLocalizedString("registration_placeholder_confirm_password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the delivery of all accepted requests
      ///
      /// Locales: en, de
      static func delivery_dialog_deliver_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_deliver_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_deliver_description"
        }

        return NSLocalizedString("delivery_dialog_deliver_description", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en, de
      static func registration_button_title_continue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_title_continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_title_continue"
        }

        return NSLocalizedString("registration_button_title_continue", bundle: bundle, comment: "")
      }

      /// en translation: Current Items List
      ///
      /// Locales: en, de
      static func helper_request_overview_button_title_current_items_list(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_title_current_items_list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_title_current_items_list"
        }

        return NSLocalizedString("helper_request_overview_button_title_current_items_list", bundle: bundle, comment: "")
      }

      /// en translation: Currently there are no calls waiting for translation. Please try again later!
      ///
      /// Locales: en, de
      static func transcribe_info_error_message_no_calls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_error_message_no_calls", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_error_message_no_calls"
        }

        return NSLocalizedString("transcribe_info_error_message_no_calls", bundle: bundle, comment: "")
      }

      /// en translation: Deliver
      ///
      /// Locales: en, de
      static func delivery_dialog_deliver_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_dialog_deliver_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_dialog_deliver_title"
        }

        return NSLocalizedString("delivery_dialog_deliver_title", bundle: bundle, comment: "")
      }

      /// en translation: Delivery comment
      ///
      /// Locales: en, de
      static func seeker_request_create_placeholder_delivery_comment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_request_create_placeholder_delivery_comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_request_create_placeholder_delivery_comment"
        }

        return NSLocalizedString("seeker_request_create_placeholder_delivery_comment", bundle: bundle, comment: "")
      }

      /// en translation: Delivery!
      ///
      /// Locales: en, de
      static func delivery_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_screen_title"
        }

        return NSLocalizedString("delivery_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, de
      static func transcribe_end_button_title_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_end_button_title_complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_end_button_title_complete"
        }

        return NSLocalizedString("transcribe_end_button_title_complete", bundle: bundle, comment: "")
      }

      /// en translation: Done!
      ///
      /// Locales: en, de
      static func seeker_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_success_title"
        }

        return NSLocalizedString("seeker_success_title", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en, de
      static func registration_placeholder_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_email"
        }

        return NSLocalizedString("registration_placeholder_email", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, de
      static func error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_title"
        }

        return NSLocalizedString("error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func helper_request_overview_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_error_title"
        }

        return NSLocalizedString("helper_request_overview_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func seeker_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_error_title"
        }

        return NSLocalizedString("seeker_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, de
      static func shopping_list_overview_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_overview_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_overview_error_title"
        }

        return NSLocalizedString("shopping_list_overview_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Finish shopping
      ///
      /// Locales: en, de
      static func delivery_confirmation_confirm_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_confirmation_confirm_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_confirmation_confirm_button_title"
        }

        return NSLocalizedString("delivery_confirmation_confirm_button_title", bundle: bundle, comment: "")
      }

      /// en translation: First name
      ///
      /// Locales: en, de
      static func registration_placeholder_firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_firstName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_firstName"
        }

        return NSLocalizedString("registration_placeholder_firstName", bundle: bundle, comment: "")
      }

      /// en translation: First name
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_first_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_first_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_first_name"
        }

        return NSLocalizedString("transcribe_info_input_text_title_first_name", bundle: bundle, comment: "")
      }

      /// en translation: How would you like to help?
      ///
      /// Locales: en, de
      static func helper_type_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_type_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_type_screen_title"
        }

        return NSLocalizedString("helper_type_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: How would you like to make your list?
      ///
      /// Locales: en, de
      static func seeker_type_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_type_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_type_screen_title"
        }

        return NSLocalizedString("seeker_type_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: I can help
      ///
      /// Locales: en, de
      static func role_selection_helper(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_helper", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_helper"
        }

        return NSLocalizedString("role_selection_helper", bundle: bundle, comment: "")
      }

      /// en translation: I need something
      ///
      /// Locales: en, de
      static func role_selection_seeker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_seeker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_seeker"
        }

        return NSLocalizedString("role_selection_seeker", bundle: bundle, comment: "")
      }

      /// en translation: I need:
      ///
      /// Locales: en, de
      static func seeker_request_create_heading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_request_create_heading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_request_create_heading"
        }

        return NSLocalizedString("seeker_request_create_heading", bundle: bundle, comment: "")
      }

      /// en translation: I'd like to shop!
      ///
      /// Locales: en, de
      static func helper_type_button_shopping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_type_button_shopping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_type_button_shopping"
        }

        return NSLocalizedString("helper_type_button_shopping", bundle: bundle, comment: "")
      }

      /// en translation: Input further information
      ///
      /// Locales: en, de
      static func user_input_details_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_screen_title"
        }

        return NSLocalizedString("user_input_details_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Invalid E-mail address
      ///
      /// Locales: en, de
      static func error_message_registration_invalid_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_invalid_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_invalid_email"
        }

        return NSLocalizedString("error_message_registration_invalid_email", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, de
      static func registration_placeholder_lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_lastName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_lastName"
        }

        return NSLocalizedString("registration_placeholder_lastName", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_last_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_last_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_last_name"
        }

        return NSLocalizedString("transcribe_info_input_text_title_last_name", bundle: bundle, comment: "")
      }

      /// en translation: List
      ///
      /// Locales: en, de
      static func helper_request_overview_item_type_list(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_item_type_list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_item_type_list"
        }

        return NSLocalizedString("helper_request_overview_item_type_list", bundle: bundle, comment: "")
      }

      /// en translation: Loading...
      ///
      /// Locales: en, de
      static func loading_overlay_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading_overlay_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading_overlay_message"
        }

        return NSLocalizedString("loading_overlay_message", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, de
      static func role_selection_button_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_button_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_button_logout"
        }

        return NSLocalizedString("role_selection_button_logout", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, de
      static func login_button_title_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button_title_login"
        }

        return NSLocalizedString("login_button_title_login", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, de
      static func login_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_screen_title"
        }

        return NSLocalizedString("login_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Login failed. Please try again.
      ///
      /// Locales: en, de
      static func error_message_login_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_login_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_login_failed"
        }

        return NSLocalizedString("error_message_login_failed", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, de
      static func user_profile_button_title_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_profile_button_title_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_profile_button_title_logout"
        }

        return NSLocalizedString("user_profile_button_title_logout", bundle: bundle, comment: "")
      }

      /// en translation: Make a phone call
      ///
      /// Locales: en, de
      static func seeker_type_button_phone_call(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_type_button_phone_call", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_type_button_phone_call"
        }

        return NSLocalizedString("seeker_type_button_phone_call", bundle: bundle, comment: "")
      }

      /// en translation: No calls found!
      ///
      /// Locales: en, de
      static func transcribe_info_error_title_no_calls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_error_title_no_calls", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_error_title_no_calls"
        }

        return NSLocalizedString("transcribe_info_error_title_no_calls", bundle: bundle, comment: "")
      }

      /// en translation: No.
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_houseNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_houseNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_houseNumber"
        }

        return NSLocalizedString("user_input_details_placeholder_houseNumber", bundle: bundle, comment: "")
      }

      /// en translation: Number
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_street_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_street_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_street_number"
        }

        return NSLocalizedString("transcribe_info_input_text_title_street_number", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, de
      static func error_button_ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_button_ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_button_ok"
        }

        return NSLocalizedString("error_button_ok", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, de
      static func ok_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok_button_title"
        }

        return NSLocalizedString("ok_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Open calls:
      ///
      /// Locales: en, de
      static func helper_call_overview_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_call_overview_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_call_overview_screen_title"
        }

        return NSLocalizedString("helper_call_overview_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Overview
      ///
      /// Locales: en, de
      static func helper_request_overview_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_screen_title"
        }

        return NSLocalizedString("helper_request_overview_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func login_placeholder_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholder_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholder_password"
        }

        return NSLocalizedString("login_placeholder_password", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, de
      static func registration_placeholder_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_password"
        }

        return NSLocalizedString("registration_placeholder_password", bundle: bundle, comment: "")
      }

      /// en translation: Passwords dont match
      ///
      /// Locales: en, de
      static func error_message_registration_password_match(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_password_match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_password_match"
        }

        return NSLocalizedString("error_message_registration_password_match", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en, de
      static func registration_placeholder_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_phone"
        }

        return NSLocalizedString("registration_placeholder_phone", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_phone_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_phone_number"
        }

        return NSLocalizedString("transcribe_info_input_text_title_phone_number", bundle: bundle, comment: "")
      }

      /// en translation: Phone number doesn't match the expected format: +4915112345678
      ///
      /// Locales: en, de
      static func error_message_input_validation_phone_number_invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_input_validation_phone_number_invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_input_validation_phone_number_invalid"
        }

        return NSLocalizedString("error_message_input_validation_phone_number_invalid", bundle: bundle, comment: "")
      }

      /// en translation: Place
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_city"
        }

        return NSLocalizedString("user_input_details_placeholder_city", bundle: bundle, comment: "")
      }

      /// en translation: Please call %@ to record your shopping order.
      ///
      /// Locales: en, de
      static func seeker_phone_call_text_ios(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("seeker_phone_call_text_ios", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_phone_call_text_ios"
        }

        let format = NSLocalizedString("seeker_phone_call_text_ios", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please enter the valid zip code
      ///
      /// Locales: en, de
      static func error_message_input_validation_zip_code_invalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_input_validation_zip_code_invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_input_validation_zip_code_invalid"
        }

        return NSLocalizedString("error_message_input_validation_zip_code_invalid", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_login_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_login_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_login_field_missing"
        }

        return NSLocalizedString("error_message_login_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_registration_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_field_missing"
        }

        return NSLocalizedString("error_message_registration_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in
      ///
      /// Locales: en, de
      static func error_message_user_detail_field_missing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_user_detail_field_missing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_user_detail_field_missing"
        }

        return NSLocalizedString("error_message_user_detail_field_missing", bundle: bundle, comment: "")
      }

      /// en translation: Postal Code / Town
      ///
      /// Locales: en, de
      static func delivery_confirmation_address_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_confirmation_address_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_confirmation_address_title"
        }

        return NSLocalizedString("delivery_confirmation_address_title", bundle: bundle, comment: "")
      }

      /// en translation: Postal code
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_postal_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_postal_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_postal_code"
        }

        return NSLocalizedString("transcribe_info_input_text_title_postal_code", bundle: bundle, comment: "")
      }

      /// en translation: Previous purchases
      ///
      /// Locales: en, de
      static func helper_request_overview_button_previous_requests(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_previous_requests", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_previous_requests"
        }

        return NSLocalizedString("helper_request_overview_button_previous_requests", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static func registration_button_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_privacy_policy"
        }

        return NSLocalizedString("registration_button_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, de
      static func registration_term_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_term_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_term_privacy_policy"
        }

        return NSLocalizedString("registration_term_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Recording
      ///
      /// Locales: en, de
      static func helper_request_overview_item_type_recording(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_item_type_recording", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_item_type_recording"
        }

        return NSLocalizedString("helper_request_overview_item_type_recording", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, de
      static func login_button_title_register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title_register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button_title_register"
        }

        return NSLocalizedString("login_button_title_register", bundle: bundle, comment: "")
      }

      /// en translation: Request already accepted
      ///
      /// Locales: en, de
      static func helper_request_detail_button_accepted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_button_accepted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_button_accepted"
        }

        return NSLocalizedString("helper_request_detail_button_accepted", bundle: bundle, comment: "")
      }

      /// en translation: Request failed!
      ///
      /// Locales: en, de
      static func transcribe_articles_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_articles_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_articles_error_title"
        }

        return NSLocalizedString("transcribe_articles_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Role
      ///
      /// Locales: en, de
      static func role_selection_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_selection_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_selection_screen_title"
        }

        return NSLocalizedString("role_selection_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Saving the help request failed. Please make sure the data is correct and valid!
      ///
      /// Locales: en, de
      static func transcribe_articles_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_articles_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_articles_error_message"
        }

        return NSLocalizedString("transcribe_articles_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Select items
      ///
      /// Locales: en, de
      static func seeker_type_button_help_request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_type_button_help_request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_type_button_help_request"
        }

        return NSLocalizedString("seeker_type_button_help_request", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, de
      static func registration_button_title_send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_button_title_send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_button_title_send"
        }

        return NSLocalizedString("registration_button_title_send", bundle: bundle, comment: "")
      }

      /// en translation: Shopping
      ///
      /// Locales: en, de
      static func helper_request_overview_button_summary_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_summary_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_summary_title"
        }

        return NSLocalizedString("helper_request_overview_button_summary_title", bundle: bundle, comment: "")
      }

      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static func shopping_list_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_screen_title"
        }

        return NSLocalizedString("shopping_list_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Shopping list
      ///
      /// Locales: en, de
      static func transcribe_articles_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_articles_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_articles_screen_title"
        }

        return NSLocalizedString("transcribe_articles_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Shopping list could not be loaded. Please try again!
      ///
      /// Locales: en, de
      static func shopping_list_overview_error_loading_failed_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping_list_overview_error_loading_failed_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shopping_list_overview_error_loading_failed_message"
        }

        return NSLocalizedString("shopping_list_overview_error_loading_failed_message", bundle: bundle, comment: "")
      }

      /// en translation: Sign-up
      ///
      /// Locales: en, de
      static func registration_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_screen_title"
        }

        return NSLocalizedString("registration_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, de
      static func helper_request_overview_button_title_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_title_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_title_start"
        }

        return NSLocalizedString("helper_request_overview_button_title_start", bundle: bundle, comment: "")
      }

      /// en translation: Street
      ///
      /// Locales: en, de
      static func transcribe_info_input_text_title_street(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_info_input_text_title_street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_info_input_text_title_street"
        }

        return NSLocalizedString("transcribe_info_input_text_title_street", bundle: bundle, comment: "")
      }

      /// en translation: Street
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_street(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_street", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_street"
        }

        return NSLocalizedString("user_input_details_placeholder_street", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, de
      static func seeker_submit_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_submit_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_submit_button_title"
        }

        return NSLocalizedString("seeker_submit_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Tel.
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_phoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_phoneNumber"
        }

        return NSLocalizedString("user_input_details_placeholder_phoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Tel.: 
      ///
      /// Locales: en, de
      static func delivery_request_phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_request_phoneNumber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_request_phoneNumber"
        }

        return NSLocalizedString("delivery_request_phoneNumber", bundle: bundle, comment: "")
      }

      /// en translation: Telephone number
      ///
      /// Locales: en, de
      static func delivery_confirmation_phone_number_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_confirmation_phone_number_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_confirmation_phone_number_title"
        }

        return NSLocalizedString("delivery_confirmation_phone_number_title", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for completing the orders!
      ///
      /// Locales: en, de
      static func delivery_confirmation_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delivery_confirmation_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delivery_confirmation_screen_title"
        }

        return NSLocalizedString("delivery_confirmation_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for helping complete the request!
      ///
      /// Locales: en, de
      static func transcribe_end_screen_title_ios(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transcribe_end_screen_title_ios", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transcribe_end_screen_title_ios"
        }

        return NSLocalizedString("transcribe_end_screen_title_ios", bundle: bundle, comment: "")
      }

      /// en translation: To collect
      ///
      /// Locales: en, de
      static func helper_request_detail_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_screen_title"
        }

        return NSLocalizedString("helper_request_detail_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Total 
      ///
      /// Locales: en, de
      static func helper_request_overview_button_summary_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_button_summary_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_button_summary_details"
        }

        return NSLocalizedString("helper_request_overview_button_summary_details", bundle: bundle, comment: "")
      }

      /// en translation: Transcript a call!
      ///
      /// Locales: en, de
      static func helper_type_button_transcript(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_type_button_transcript", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_type_button_transcript"
        }

        return NSLocalizedString("helper_type_button_transcript", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, de
      static func error_message_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_unknown"
        }

        return NSLocalizedString("error_message_unknown", bundle: bundle, comment: "")
      }

      /// en translation: User authentication failed please try to login again.
      ///
      /// Locales: en, de
      static func error_dialog_authentication_failed_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_dialog_authentication_failed_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_dialog_authentication_failed_message"
        }

        return NSLocalizedString("error_dialog_authentication_failed_message", bundle: bundle, comment: "")
      }

      /// en translation: User profile
      ///
      /// Locales: en, de
      static func user_profile_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_profile_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_profile_screen_title"
        }

        return NSLocalizedString("user_profile_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: User registration failed. Please make sure you input valid data.
      ///
      /// Locales: en, de
      static func error_message_registration_validation_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_validation_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_validation_failed"
        }

        return NSLocalizedString("error_message_registration_validation_failed", bundle: bundle, comment: "")
      }

      /// en translation: User registration failed. Please try again.
      ///
      /// Locales: en, de
      static func error_message_registration_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_registration_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_registration_failed"
        }

        return NSLocalizedString("error_message_registration_failed", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, de
      static func login_placeholder_username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_placeholder_username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_placeholder_username"
        }

        return NSLocalizedString("login_placeholder_username", bundle: bundle, comment: "")
      }

      /// en translation: Welcome, 
      ///
      /// Locales: en, de
      static func role_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_screen_title"
        }

        return NSLocalizedString("role_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Welcome, %@
      ///
      /// Locales: en, de
      static func role_screen_title_ios(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("role_screen_title_ios", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_screen_title_ios"
        }

        let format = NSLocalizedString("role_screen_title_ios", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: What would you like to do today?
      ///
      /// Locales: en, de
      static func role_screen_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("role_screen_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "role_screen_subtitle"
        }

        return NSLocalizedString("role_screen_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Will do!
      ///
      /// Locales: en, de
      static func helper_request_detail_button_accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_detail_button_accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_detail_button_accept"
        }

        return NSLocalizedString("helper_request_detail_button_accept", bundle: bundle, comment: "")
      }

      /// en translation: You haven't sent any requests yet. Please click below right to create your first request.
      ///
      /// Locales: en, de
      static func seeker_overview_empty_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_overview_empty_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_overview_empty_label"
        }

        return NSLocalizedString("seeker_overview_empty_label", bundle: bundle, comment: "")
      }

      /// en translation: Your request
      ///
      /// Locales: en, de
      static func seeker_detail_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_detail_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_detail_screen_title"
        }

        return NSLocalizedString("seeker_detail_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static func helper_request_overview_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helper_request_overview_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helper_request_overview_error_message"
        }

        return NSLocalizedString("helper_request_overview_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Your request could not be sent! Please try again.
      ///
      /// Locales: en, de
      static func seeker_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_error_message"
        }

        return NSLocalizedString("seeker_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Your request was sent successfully.
      ///
      /// Locales: en, de
      static func seeker_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_success_message"
        }

        return NSLocalizedString("seeker_success_message", bundle: bundle, comment: "")
      }

      /// en translation: Your requests:
      ///
      /// Locales: en, de
      static func seeker_overview_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("seeker_overview_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "seeker_overview_screen_title"
        }

        return NSLocalizedString("seeker_overview_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: ZIP code
      ///
      /// Locales: en, de
      static func registration_placeholder_zip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration_placeholder_zip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration_placeholder_zip"
        }

        return NSLocalizedString("registration_placeholder_zip", bundle: bundle, comment: "")
      }

      /// en translation: Zip code
      ///
      /// Locales: en, de
      static func user_input_details_placeholder_zipCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_input_details_placeholder_zipCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_input_details_placeholder_zipCode"
        }

        return NSLocalizedString("user_input_details_placeholder_zipCode", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "darkButtonText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'darkButtonText' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
